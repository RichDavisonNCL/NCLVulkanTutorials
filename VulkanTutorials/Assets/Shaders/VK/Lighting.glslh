struct Light	{
	vec3	position;
	float	radius;
	vec4	colour;
};

void LightCalculation(vec3 worldPos, vec3 worldBump, vec3 cameraPos, vec3 diffuseColour, Light light, inout vec3 diffuseLight, inout vec3 specLight, float ambientLevel) {
	vec3 incident	= normalize(light.position - worldPos);
	vec3 viewDir	= normalize(cameraPos - worldPos);
	vec3 halfAngle	= normalize(incident + viewDir);

	float fragDistance	= length(light.position - worldPos);
	float attenuation	= 1.0f / (fragDistance * fragDistance);

	float maxAtten = 1.0f / (light.radius*light.radius);
	attenuation		-= maxAtten;
	//attenuation /= 1.0f + maxAtten;

	float linearAtten = 1.0f - (fragDistance / light.radius);

	float lambert	 = clamp(dot(worldBump, incident), ambientLevel, 1.0f);
	float specAmount = dot(worldBump, halfAngle);
	float specPower  = clamp(pow(specAmount, 40.0f), 0.0f, 1.0f);

	diffuseLight  = diffuseColour * light.colour.rgb * lambert * attenuation;

	specLight	 = light.colour.rgb * specPower * attenuation;
	diffuseLight = light.colour.rgb * lambert * attenuation;
}