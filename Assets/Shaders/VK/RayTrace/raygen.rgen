/******************************************************************************
This file is part of the Newcastle Vulkan Tutorial Series

Author:Rich Davison
Contact:richgdavison@gmail.com
License: MIT (see LICENSE file at the top of the source tree)
*//////////////////////////////////////////////////////////////////////////////
#version 460
#extension GL_GOOGLE_include_directive		: enable
#extension GL_ARB_separate_shader_objects	: enable
#extension GL_ARB_shading_language_420pack	: enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "raystructs.glslh"

layout(location = 0) rayPayloadEXT BasicPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT tlas;

layout (set = 1, binding  = 0) uniform  CameraInfo 
{
	mat4 viewMatrix;
	mat4 projMatrix;
};

layout (set = 2, binding  = 0) uniform  InverseCameraInfo 
{
	mat4 invViewMatrix;
	mat4 invProjMatrix;
};

layout(set = 3, binding = 0, rgba32f) uniform image2D image;

void main() {
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  vec4 target    = invProjMatrix * vec4(d.x, d.y, 1, 1);
  vec4 origin    = invViewMatrix * vec4(0, 0, 0, 1);
  
  vec4 direction = invViewMatrix * vec4(normalize(target.xyz), 0);

  //origin    = vec4(0,0,0,1);
  //direction = vec4(0,0,-1,1);

  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.001;
  float tMax     = 10000.0;

  traceRayEXT(tlas,             // acceleration structure
              rayFlags,         // rayFlags
              0xFF,             // cullMask
              0,                // sbtRecordOffset
              0,                // sbtRecordStride
              0,                // missIndex
              origin.xyz,       // ray origin
              tMin,             // ray min range
              direction.xyz,    // ray direction
              tMax,             // ray max range
              0                 // payload (location = 0)
  );

  //imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.hitValue, 1.0));

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.hitValue,1.0));
}